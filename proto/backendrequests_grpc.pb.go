// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/backendrequests.proto

package taskape_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendRequests_LoginNewUser_FullMethodName            = "/taskapebackend.BackendRequests/loginNewUser"
	BackendRequests_ValidateToken_FullMethodName           = "/taskapebackend.BackendRequests/validateToken"
	BackendRequests_RefreshToken_FullMethodName            = "/taskapebackend.BackendRequests/refreshToken"
	BackendRequests_VerifyUserToken_FullMethodName         = "/taskapebackend.BackendRequests/verifyUserToken"
	BackendRequests_RegisterNewProfile_FullMethodName      = "/taskapebackend.BackendRequests/registerNewProfile"
	BackendRequests_CreateTask_FullMethodName              = "/taskapebackend.BackendRequests/CreateTask"
	BackendRequests_CreateTasksBatch_FullMethodName        = "/taskapebackend.BackendRequests/CreateTasksBatch"
	BackendRequests_GetUserTasks_FullMethodName            = "/taskapebackend.BackendRequests/GetUserTasks"
	BackendRequests_CheckHandleAvailability_FullMethodName = "/taskapebackend.BackendRequests/CheckHandleAvailability"
	BackendRequests_GetUser_FullMethodName                 = "/taskapebackend.BackendRequests/GetUser"
	BackendRequests_UpdateTask_FullMethodName              = "/taskapebackend.BackendRequests/UpdateTask"
	BackendRequests_UpdateTaskOrder_FullMethodName         = "/taskapebackend.BackendRequests/UpdateTaskOrder"
	BackendRequests_SearchUsers_FullMethodName             = "/taskapebackend.BackendRequests/SearchUsers"
	BackendRequests_SendFriendRequest_FullMethodName       = "/taskapebackend.BackendRequests/SendFriendRequest"
	BackendRequests_RespondToFriendRequest_FullMethodName  = "/taskapebackend.BackendRequests/RespondToFriendRequest"
	BackendRequests_GetUserFriends_FullMethodName          = "/taskapebackend.BackendRequests/GetUserFriends"
	BackendRequests_GetFriendRequests_FullMethodName       = "/taskapebackend.BackendRequests/GetFriendRequests"
	BackendRequests_GetUserEvents_FullMethodName           = "/taskapebackend.BackendRequests/GetUserEvents"
	BackendRequests_ConfirmTaskCompletion_FullMethodName   = "/taskapebackend.BackendRequests/ConfirmTaskCompletion"
	BackendRequests_LikeEvent_FullMethodName               = "/taskapebackend.BackendRequests/LikeEvent"
	BackendRequests_UnlikeEvent_FullMethodName             = "/taskapebackend.BackendRequests/UnlikeEvent"
	BackendRequests_AddEventComment_FullMethodName         = "/taskapebackend.BackendRequests/AddEventComment"
	BackendRequests_GetEventComments_FullMethodName        = "/taskapebackend.BackendRequests/GetEventComments"
	BackendRequests_DeleteEventComment_FullMethodName      = "/taskapebackend.BackendRequests/DeleteEventComment"
	BackendRequests_GetUsersBatch_FullMethodName           = "/taskapebackend.BackendRequests/GetUsersBatch"
	BackendRequests_GetUsersTasksBatch_FullMethodName      = "/taskapebackend.BackendRequests/GetUsersTasksBatch"
	BackendRequests_EditUserProfile_FullMethodName         = "/taskapebackend.BackendRequests/EditUserProfile"
	BackendRequests_CreateGroup_FullMethodName             = "/taskapebackend.BackendRequests/CreateGroup"
	BackendRequests_GetGroupTasks_FullMethodName           = "/taskapebackend.BackendRequests/GetGroupTasks"
	BackendRequests_InviteToGroup_FullMethodName           = "/taskapebackend.BackendRequests/InviteToGroup"
	BackendRequests_AcceptGroupInvite_FullMethodName       = "/taskapebackend.BackendRequests/AcceptGroupInvite"
	BackendRequests_KickUserFromGroup_FullMethodName       = "/taskapebackend.BackendRequests/KickUserFromGroup"
	BackendRequests_GetUserRelatedEvents_FullMethodName    = "/taskapebackend.BackendRequests/GetUserRelatedEvents"
	BackendRequests_GetUserStreak_FullMethodName           = "/taskapebackend.BackendRequests/GetUserStreak"
)

// BackendRequestsClient is the client API for BackendRequests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendRequestsClient interface {
	LoginNewUser(ctx context.Context, in *NewUserLoginRequest, opts ...grpc.CallOption) (*NewUserLoginResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	VerifyUserToken(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
	RegisterNewProfile(ctx context.Context, in *RegisterNewProfileRequest, opts ...grpc.CallOption) (*RegisterNewProfileResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	CreateTasksBatch(ctx context.Context, in *CreateTasksBatchRequest, opts ...grpc.CallOption) (*CreateTasksBatchResponse, error)
	GetUserTasks(ctx context.Context, in *GetUserTasksRequest, opts ...grpc.CallOption) (*GetUserTasksResponse, error)
	CheckHandleAvailability(ctx context.Context, in *CheckHandleRequest, opts ...grpc.CallOption) (*CheckHandleResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	UpdateTaskOrder(ctx context.Context, in *UpdateTaskOrderRequest, opts ...grpc.CallOption) (*UpdateTaskOrderResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
	RespondToFriendRequest(ctx context.Context, in *RespondToFriendRequestRequest, opts ...grpc.CallOption) (*RespondToFriendRequestResponse, error)
	GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error)
	GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error)
	GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error)
	ConfirmTaskCompletion(ctx context.Context, in *ConfirmTaskCompletionRequest, opts ...grpc.CallOption) (*ConfirmTaskCompletionResponse, error)
	LikeEvent(ctx context.Context, in *LikeEventRequest, opts ...grpc.CallOption) (*LikeEventResponse, error)
	UnlikeEvent(ctx context.Context, in *UnlikeEventRequest, opts ...grpc.CallOption) (*UnlikeEventResponse, error)
	AddEventComment(ctx context.Context, in *AddEventCommentRequest, opts ...grpc.CallOption) (*AddEventCommentResponse, error)
	GetEventComments(ctx context.Context, in *GetEventCommentsRequest, opts ...grpc.CallOption) (*GetEventCommentsResponse, error)
	DeleteEventComment(ctx context.Context, in *DeleteEventCommentRequest, opts ...grpc.CallOption) (*DeleteEventCommentResponse, error)
	GetUsersBatch(ctx context.Context, in *GetUsersBatchRequest, opts ...grpc.CallOption) (*GetUsersBatchResponse, error)
	GetUsersTasksBatch(ctx context.Context, in *GetUsersTasksBatchRequest, opts ...grpc.CallOption) (*GetUsersTasksBatchResponse, error)
	EditUserProfile(ctx context.Context, in *EditUserProfileRequest, opts ...grpc.CallOption) (*EditUserProfileResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroupTasks(ctx context.Context, in *GetGroupTasksRequest, opts ...grpc.CallOption) (*GetGroupTasksResponse, error)
	InviteToGroup(ctx context.Context, in *InviteToGroupRequest, opts ...grpc.CallOption) (*InviteToGroupResponse, error)
	AcceptGroupInvite(ctx context.Context, in *AcceptGroupInviteRequest, opts ...grpc.CallOption) (*AcceptGroupInviteResponse, error)
	KickUserFromGroup(ctx context.Context, in *KickUserFromGroupRequest, opts ...grpc.CallOption) (*KickUserFromGroupResponse, error)
	GetUserRelatedEvents(ctx context.Context, in *GetUserRelatedEventsRequest, opts ...grpc.CallOption) (*GetUserRelatedEventsResponse, error)
	GetUserStreak(ctx context.Context, in *GetUserStreakRequest, opts ...grpc.CallOption) (*GetUserStreakResponse, error)
}

type backendRequestsClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendRequestsClient(cc grpc.ClientConnInterface) BackendRequestsClient {
	return &backendRequestsClient{cc}
}

func (c *backendRequestsClient) LoginNewUser(ctx context.Context, in *NewUserLoginRequest, opts ...grpc.CallOption) (*NewUserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewUserLoginResponse)
	err := c.cc.Invoke(ctx, BackendRequests_LoginNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, BackendRequests_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, BackendRequests_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) VerifyUserToken(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, BackendRequests_VerifyUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) RegisterNewProfile(ctx context.Context, in *RegisterNewProfileRequest, opts ...grpc.CallOption) (*RegisterNewProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNewProfileResponse)
	err := c.cc.Invoke(ctx, BackendRequests_RegisterNewProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, BackendRequests_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) CreateTasksBatch(ctx context.Context, in *CreateTasksBatchRequest, opts ...grpc.CallOption) (*CreateTasksBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTasksBatchResponse)
	err := c.cc.Invoke(ctx, BackendRequests_CreateTasksBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUserTasks(ctx context.Context, in *GetUserTasksRequest, opts ...grpc.CallOption) (*GetUserTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTasksResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUserTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) CheckHandleAvailability(ctx context.Context, in *CheckHandleRequest, opts ...grpc.CallOption) (*CheckHandleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckHandleResponse)
	err := c.cc.Invoke(ctx, BackendRequests_CheckHandleAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, BackendRequests_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) UpdateTaskOrder(ctx context.Context, in *UpdateTaskOrderRequest, opts ...grpc.CallOption) (*UpdateTaskOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskOrderResponse)
	err := c.cc.Invoke(ctx, BackendRequests_UpdateTaskOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, BackendRequests_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, BackendRequests_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) RespondToFriendRequest(ctx context.Context, in *RespondToFriendRequestRequest, opts ...grpc.CallOption) (*RespondToFriendRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondToFriendRequestResponse)
	err := c.cc.Invoke(ctx, BackendRequests_RespondToFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUserFriends(ctx context.Context, in *GetUserFriendsRequest, opts ...grpc.CallOption) (*GetUserFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFriendsResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUserFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetFriendRequests(ctx context.Context, in *GetFriendRequestsRequest, opts ...grpc.CallOption) (*GetFriendRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendRequestsResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetFriendRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEventsResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUserEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) ConfirmTaskCompletion(ctx context.Context, in *ConfirmTaskCompletionRequest, opts ...grpc.CallOption) (*ConfirmTaskCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmTaskCompletionResponse)
	err := c.cc.Invoke(ctx, BackendRequests_ConfirmTaskCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) LikeEvent(ctx context.Context, in *LikeEventRequest, opts ...grpc.CallOption) (*LikeEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeEventResponse)
	err := c.cc.Invoke(ctx, BackendRequests_LikeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) UnlikeEvent(ctx context.Context, in *UnlikeEventRequest, opts ...grpc.CallOption) (*UnlikeEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeEventResponse)
	err := c.cc.Invoke(ctx, BackendRequests_UnlikeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) AddEventComment(ctx context.Context, in *AddEventCommentRequest, opts ...grpc.CallOption) (*AddEventCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEventCommentResponse)
	err := c.cc.Invoke(ctx, BackendRequests_AddEventComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetEventComments(ctx context.Context, in *GetEventCommentsRequest, opts ...grpc.CallOption) (*GetEventCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventCommentsResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetEventComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) DeleteEventComment(ctx context.Context, in *DeleteEventCommentRequest, opts ...grpc.CallOption) (*DeleteEventCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventCommentResponse)
	err := c.cc.Invoke(ctx, BackendRequests_DeleteEventComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUsersBatch(ctx context.Context, in *GetUsersBatchRequest, opts ...grpc.CallOption) (*GetUsersBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersBatchResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUsersBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUsersTasksBatch(ctx context.Context, in *GetUsersTasksBatchRequest, opts ...grpc.CallOption) (*GetUsersTasksBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersTasksBatchResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUsersTasksBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) EditUserProfile(ctx context.Context, in *EditUserProfileRequest, opts ...grpc.CallOption) (*EditUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditUserProfileResponse)
	err := c.cc.Invoke(ctx, BackendRequests_EditUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, BackendRequests_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetGroupTasks(ctx context.Context, in *GetGroupTasksRequest, opts ...grpc.CallOption) (*GetGroupTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupTasksResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetGroupTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) InviteToGroup(ctx context.Context, in *InviteToGroupRequest, opts ...grpc.CallOption) (*InviteToGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteToGroupResponse)
	err := c.cc.Invoke(ctx, BackendRequests_InviteToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) AcceptGroupInvite(ctx context.Context, in *AcceptGroupInviteRequest, opts ...grpc.CallOption) (*AcceptGroupInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptGroupInviteResponse)
	err := c.cc.Invoke(ctx, BackendRequests_AcceptGroupInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) KickUserFromGroup(ctx context.Context, in *KickUserFromGroupRequest, opts ...grpc.CallOption) (*KickUserFromGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickUserFromGroupResponse)
	err := c.cc.Invoke(ctx, BackendRequests_KickUserFromGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUserRelatedEvents(ctx context.Context, in *GetUserRelatedEventsRequest, opts ...grpc.CallOption) (*GetUserRelatedEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRelatedEventsResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUserRelatedEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendRequestsClient) GetUserStreak(ctx context.Context, in *GetUserStreakRequest, opts ...grpc.CallOption) (*GetUserStreakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStreakResponse)
	err := c.cc.Invoke(ctx, BackendRequests_GetUserStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendRequestsServer is the server API for BackendRequests service.
// All implementations must embed UnimplementedBackendRequestsServer
// for forward compatibility.
type BackendRequestsServer interface {
	LoginNewUser(context.Context, *NewUserLoginRequest) (*NewUserLoginResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	VerifyUserToken(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	RegisterNewProfile(context.Context, *RegisterNewProfileRequest) (*RegisterNewProfileResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	CreateTasksBatch(context.Context, *CreateTasksBatchRequest) (*CreateTasksBatchResponse, error)
	GetUserTasks(context.Context, *GetUserTasksRequest) (*GetUserTasksResponse, error)
	CheckHandleAvailability(context.Context, *CheckHandleRequest) (*CheckHandleResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	UpdateTaskOrder(context.Context, *UpdateTaskOrderRequest) (*UpdateTaskOrderResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error)
	RespondToFriendRequest(context.Context, *RespondToFriendRequestRequest) (*RespondToFriendRequestResponse, error)
	GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error)
	GetFriendRequests(context.Context, *GetFriendRequestsRequest) (*GetFriendRequestsResponse, error)
	GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error)
	ConfirmTaskCompletion(context.Context, *ConfirmTaskCompletionRequest) (*ConfirmTaskCompletionResponse, error)
	LikeEvent(context.Context, *LikeEventRequest) (*LikeEventResponse, error)
	UnlikeEvent(context.Context, *UnlikeEventRequest) (*UnlikeEventResponse, error)
	AddEventComment(context.Context, *AddEventCommentRequest) (*AddEventCommentResponse, error)
	GetEventComments(context.Context, *GetEventCommentsRequest) (*GetEventCommentsResponse, error)
	DeleteEventComment(context.Context, *DeleteEventCommentRequest) (*DeleteEventCommentResponse, error)
	GetUsersBatch(context.Context, *GetUsersBatchRequest) (*GetUsersBatchResponse, error)
	GetUsersTasksBatch(context.Context, *GetUsersTasksBatchRequest) (*GetUsersTasksBatchResponse, error)
	EditUserProfile(context.Context, *EditUserProfileRequest) (*EditUserProfileResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	GetGroupTasks(context.Context, *GetGroupTasksRequest) (*GetGroupTasksResponse, error)
	InviteToGroup(context.Context, *InviteToGroupRequest) (*InviteToGroupResponse, error)
	AcceptGroupInvite(context.Context, *AcceptGroupInviteRequest) (*AcceptGroupInviteResponse, error)
	KickUserFromGroup(context.Context, *KickUserFromGroupRequest) (*KickUserFromGroupResponse, error)
	GetUserRelatedEvents(context.Context, *GetUserRelatedEventsRequest) (*GetUserRelatedEventsResponse, error)
	GetUserStreak(context.Context, *GetUserStreakRequest) (*GetUserStreakResponse, error)
	mustEmbedUnimplementedBackendRequestsServer()
}

// UnimplementedBackendRequestsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendRequestsServer struct{}

func (UnimplementedBackendRequestsServer) LoginNewUser(context.Context, *NewUserLoginRequest) (*NewUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNewUser not implemented")
}
func (UnimplementedBackendRequestsServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedBackendRequestsServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedBackendRequestsServer) VerifyUserToken(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserToken not implemented")
}
func (UnimplementedBackendRequestsServer) RegisterNewProfile(context.Context, *RegisterNewProfileRequest) (*RegisterNewProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewProfile not implemented")
}
func (UnimplementedBackendRequestsServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedBackendRequestsServer) CreateTasksBatch(context.Context, *CreateTasksBatchRequest) (*CreateTasksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTasksBatch not implemented")
}
func (UnimplementedBackendRequestsServer) GetUserTasks(context.Context, *GetUserTasksRequest) (*GetUserTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTasks not implemented")
}
func (UnimplementedBackendRequestsServer) CheckHandleAvailability(context.Context, *CheckHandleRequest) (*CheckHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHandleAvailability not implemented")
}
func (UnimplementedBackendRequestsServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBackendRequestsServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedBackendRequestsServer) UpdateTaskOrder(context.Context, *UpdateTaskOrderRequest) (*UpdateTaskOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskOrder not implemented")
}
func (UnimplementedBackendRequestsServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedBackendRequestsServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedBackendRequestsServer) RespondToFriendRequest(context.Context, *RespondToFriendRequestRequest) (*RespondToFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToFriendRequest not implemented")
}
func (UnimplementedBackendRequestsServer) GetUserFriends(context.Context, *GetUserFriendsRequest) (*GetUserFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriends not implemented")
}
func (UnimplementedBackendRequestsServer) GetFriendRequests(context.Context, *GetFriendRequestsRequest) (*GetFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequests not implemented")
}
func (UnimplementedBackendRequestsServer) GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedBackendRequestsServer) ConfirmTaskCompletion(context.Context, *ConfirmTaskCompletionRequest) (*ConfirmTaskCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTaskCompletion not implemented")
}
func (UnimplementedBackendRequestsServer) LikeEvent(context.Context, *LikeEventRequest) (*LikeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeEvent not implemented")
}
func (UnimplementedBackendRequestsServer) UnlikeEvent(context.Context, *UnlikeEventRequest) (*UnlikeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeEvent not implemented")
}
func (UnimplementedBackendRequestsServer) AddEventComment(context.Context, *AddEventCommentRequest) (*AddEventCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEventComment not implemented")
}
func (UnimplementedBackendRequestsServer) GetEventComments(context.Context, *GetEventCommentsRequest) (*GetEventCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventComments not implemented")
}
func (UnimplementedBackendRequestsServer) DeleteEventComment(context.Context, *DeleteEventCommentRequest) (*DeleteEventCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventComment not implemented")
}
func (UnimplementedBackendRequestsServer) GetUsersBatch(context.Context, *GetUsersBatchRequest) (*GetUsersBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersBatch not implemented")
}
func (UnimplementedBackendRequestsServer) GetUsersTasksBatch(context.Context, *GetUsersTasksBatchRequest) (*GetUsersTasksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersTasksBatch not implemented")
}
func (UnimplementedBackendRequestsServer) EditUserProfile(context.Context, *EditUserProfileRequest) (*EditUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserProfile not implemented")
}
func (UnimplementedBackendRequestsServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedBackendRequestsServer) GetGroupTasks(context.Context, *GetGroupTasksRequest) (*GetGroupTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupTasks not implemented")
}
func (UnimplementedBackendRequestsServer) InviteToGroup(context.Context, *InviteToGroupRequest) (*InviteToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedBackendRequestsServer) AcceptGroupInvite(context.Context, *AcceptGroupInviteRequest) (*AcceptGroupInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptGroupInvite not implemented")
}
func (UnimplementedBackendRequestsServer) KickUserFromGroup(context.Context, *KickUserFromGroupRequest) (*KickUserFromGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickUserFromGroup not implemented")
}
func (UnimplementedBackendRequestsServer) GetUserRelatedEvents(context.Context, *GetUserRelatedEventsRequest) (*GetUserRelatedEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRelatedEvents not implemented")
}
func (UnimplementedBackendRequestsServer) GetUserStreak(context.Context, *GetUserStreakRequest) (*GetUserStreakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStreak not implemented")
}
func (UnimplementedBackendRequestsServer) mustEmbedUnimplementedBackendRequestsServer() {}
func (UnimplementedBackendRequestsServer) testEmbeddedByValue()                         {}

// UnsafeBackendRequestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendRequestsServer will
// result in compilation errors.
type UnsafeBackendRequestsServer interface {
	mustEmbedUnimplementedBackendRequestsServer()
}

func RegisterBackendRequestsServer(s grpc.ServiceRegistrar, srv BackendRequestsServer) {
	// If the following call pancis, it indicates UnimplementedBackendRequestsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendRequests_ServiceDesc, srv)
}

func _BackendRequests_LoginNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).LoginNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_LoginNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).LoginNewUser(ctx, req.(*NewUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_VerifyUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).VerifyUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_VerifyUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).VerifyUserToken(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_RegisterNewProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).RegisterNewProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_RegisterNewProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).RegisterNewProfile(ctx, req.(*RegisterNewProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_CreateTasksBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).CreateTasksBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_CreateTasksBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).CreateTasksBatch(ctx, req.(*CreateTasksBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUserTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUserTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUserTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUserTasks(ctx, req.(*GetUserTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_CheckHandleAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).CheckHandleAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_CheckHandleAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).CheckHandleAvailability(ctx, req.(*CheckHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_UpdateTaskOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).UpdateTaskOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_UpdateTaskOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).UpdateTaskOrder(ctx, req.(*UpdateTaskOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_RespondToFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).RespondToFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_RespondToFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).RespondToFriendRequest(ctx, req.(*RespondToFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUserFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUserFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUserFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUserFriends(ctx, req.(*GetUserFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetFriendRequests(ctx, req.(*GetFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUserEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUserEvents(ctx, req.(*GetUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_ConfirmTaskCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTaskCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).ConfirmTaskCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_ConfirmTaskCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).ConfirmTaskCompletion(ctx, req.(*ConfirmTaskCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_LikeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).LikeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_LikeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).LikeEvent(ctx, req.(*LikeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_UnlikeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).UnlikeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_UnlikeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).UnlikeEvent(ctx, req.(*UnlikeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_AddEventComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).AddEventComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_AddEventComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).AddEventComment(ctx, req.(*AddEventCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetEventComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetEventComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetEventComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetEventComments(ctx, req.(*GetEventCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_DeleteEventComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).DeleteEventComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_DeleteEventComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).DeleteEventComment(ctx, req.(*DeleteEventCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUsersBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUsersBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUsersBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUsersBatch(ctx, req.(*GetUsersBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUsersTasksBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersTasksBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUsersTasksBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUsersTasksBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUsersTasksBatch(ctx, req.(*GetUsersTasksBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_EditUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).EditUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_EditUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).EditUserProfile(ctx, req.(*EditUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetGroupTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetGroupTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetGroupTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetGroupTasks(ctx, req.(*GetGroupTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_InviteToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).InviteToGroup(ctx, req.(*InviteToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_AcceptGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptGroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).AcceptGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_AcceptGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).AcceptGroupInvite(ctx, req.(*AcceptGroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_KickUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickUserFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).KickUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_KickUserFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).KickUserFromGroup(ctx, req.(*KickUserFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUserRelatedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRelatedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUserRelatedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUserRelatedEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUserRelatedEvents(ctx, req.(*GetUserRelatedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendRequests_GetUserStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendRequestsServer).GetUserStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendRequests_GetUserStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendRequestsServer).GetUserStreak(ctx, req.(*GetUserStreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendRequests_ServiceDesc is the grpc.ServiceDesc for BackendRequests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendRequests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskapebackend.BackendRequests",
	HandlerType: (*BackendRequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginNewUser",
			Handler:    _BackendRequests_LoginNewUser_Handler,
		},
		{
			MethodName: "validateToken",
			Handler:    _BackendRequests_ValidateToken_Handler,
		},
		{
			MethodName: "refreshToken",
			Handler:    _BackendRequests_RefreshToken_Handler,
		},
		{
			MethodName: "verifyUserToken",
			Handler:    _BackendRequests_VerifyUserToken_Handler,
		},
		{
			MethodName: "registerNewProfile",
			Handler:    _BackendRequests_RegisterNewProfile_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _BackendRequests_CreateTask_Handler,
		},
		{
			MethodName: "CreateTasksBatch",
			Handler:    _BackendRequests_CreateTasksBatch_Handler,
		},
		{
			MethodName: "GetUserTasks",
			Handler:    _BackendRequests_GetUserTasks_Handler,
		},
		{
			MethodName: "CheckHandleAvailability",
			Handler:    _BackendRequests_CheckHandleAvailability_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _BackendRequests_GetUser_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _BackendRequests_UpdateTask_Handler,
		},
		{
			MethodName: "UpdateTaskOrder",
			Handler:    _BackendRequests_UpdateTaskOrder_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _BackendRequests_SearchUsers_Handler,
		},
		{
			MethodName: "SendFriendRequest",
			Handler:    _BackendRequests_SendFriendRequest_Handler,
		},
		{
			MethodName: "RespondToFriendRequest",
			Handler:    _BackendRequests_RespondToFriendRequest_Handler,
		},
		{
			MethodName: "GetUserFriends",
			Handler:    _BackendRequests_GetUserFriends_Handler,
		},
		{
			MethodName: "GetFriendRequests",
			Handler:    _BackendRequests_GetFriendRequests_Handler,
		},
		{
			MethodName: "GetUserEvents",
			Handler:    _BackendRequests_GetUserEvents_Handler,
		},
		{
			MethodName: "ConfirmTaskCompletion",
			Handler:    _BackendRequests_ConfirmTaskCompletion_Handler,
		},
		{
			MethodName: "LikeEvent",
			Handler:    _BackendRequests_LikeEvent_Handler,
		},
		{
			MethodName: "UnlikeEvent",
			Handler:    _BackendRequests_UnlikeEvent_Handler,
		},
		{
			MethodName: "AddEventComment",
			Handler:    _BackendRequests_AddEventComment_Handler,
		},
		{
			MethodName: "GetEventComments",
			Handler:    _BackendRequests_GetEventComments_Handler,
		},
		{
			MethodName: "DeleteEventComment",
			Handler:    _BackendRequests_DeleteEventComment_Handler,
		},
		{
			MethodName: "GetUsersBatch",
			Handler:    _BackendRequests_GetUsersBatch_Handler,
		},
		{
			MethodName: "GetUsersTasksBatch",
			Handler:    _BackendRequests_GetUsersTasksBatch_Handler,
		},
		{
			MethodName: "EditUserProfile",
			Handler:    _BackendRequests_EditUserProfile_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _BackendRequests_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupTasks",
			Handler:    _BackendRequests_GetGroupTasks_Handler,
		},
		{
			MethodName: "InviteToGroup",
			Handler:    _BackendRequests_InviteToGroup_Handler,
		},
		{
			MethodName: "AcceptGroupInvite",
			Handler:    _BackendRequests_AcceptGroupInvite_Handler,
		},
		{
			MethodName: "KickUserFromGroup",
			Handler:    _BackendRequests_KickUserFromGroup_Handler,
		},
		{
			MethodName: "GetUserRelatedEvents",
			Handler:    _BackendRequests_GetUserRelatedEvents_Handler,
		},
		{
			MethodName: "GetUserStreak",
			Handler:    _BackendRequests_GetUserStreak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/backendrequests.proto",
}
